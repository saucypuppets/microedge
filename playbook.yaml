- name: Configure Iptables Rules
  hosts: Micros
  become: yes # This playbook requires root privileges

  tasks:

  # Install Docker

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repos
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: "{{ item.name }}"
        state: latest
        update_cache: true
      loop:
        - { name: docker-ce }
        - { name: docker-ce-cli }
        - { name: containerd.io }
        - { name: docker-compose-plugin }
        - { name: docker-buildx-plugin }
  
    - name: Restart Docker service
      ansible.builtin.service:
        name: docker
        state: restarted

    #Build and Run Nozomi Guardian Container

    - name: Create directory for Nozomi Guardian Container files
      ansible.builtin.file:
        path: "/tmp/{{ nozomi_container_source_http_path }}"
        state: directory
        mode: '0755'

    - name: Create a Nozomi docker volume
      community.docker.docker_volume:
        name: nozomi
        state: present

    - name: Download Nozomi Guardian Container files
      ansible.builtin.get_url:
        url: "{{ nozomi_container_source_http_protocol }}://{{ nozomi_container_source_http_server }}:{{ nozomi_container_source_http_port }}/{{ nozomi_container_source_http_path }}/{{ item.file }}"
        dest: "/tmp/{{ nozomi_container_source_http_path }}/{{ item.file }}"
      loop:
        - { file: "n2os-advanced_25.1.0_amd64.tbz2" }
        - { file: "n2os-port_test.log.tar.gz"}
        - { file: "product.txt" }
        - { file: "version.txt" }
        - { file: "Dockerfile" }
        - { file: "install-nozomi-deps.sh" }
        - { file: "install-prod-deps.sh" }
        - { file: "LICENSE" }

    - name: Build Nozomi Guardian Docker image
      community.docker.docker_image_build:
        name: n2os
        path: "/tmp/{{ nozomi_container_source_http_path }}"
        args:
          N2OS_HTTP_PORT: "{{ n2os_http_port }}"
          N2OS_HTTPS_PORT: "{{ n2os_https_port }}"


    - name: Delete directory for Nozomi Guardian Container files
      ansible.builtin.file:
        path: "/tmp/{{ nozomi_container_source_http_path }}"
        state: absent

    - name: Run Nozomi Guardian Container
      community.docker.docker_container:
        hostname: nozomi-sga
        name: nozomi-sga
        image: n2os
        volumes:
          - nozomi:/data
        mounts:
          - type: tmpfs
            target: /var/sandbox
            tmpfs_size: 400M
          - type: tmpfs
            target: /var/tmp_sandbox
            tmpfs_size: 100M
          - type: tmpfs
            target: /var/pipes
            tmpfs_size: 10M
          - type: tmpfs
            target: /var/traces
            tmpfs_size: 400M
          - type: tmpfs
            target: /var/checksums
            tmpfs_size: 25M
        network_mode: host
        devices:
          - /dev/net/tun:/dev/net/tun
        state: present
        
    # Configure Iptables Rules

    - name: Set default iptables policies
      ansible.builtin.iptables:
        chain: INPUT
        policy: ACCEPT
        state: present

    - name: Flush existing iptables rules (optional, use with caution in production)
      ansible.builtin.iptables:
        flush: yes

    #- name: Allow inbound traffic to docker0
    #  ansible.builtin.iptables:
    #    chain: INPUT
    #    in_interface: docker0
    #    jump: ACCEPT
    #    state: present

    - name: Allow ICMP (ping) requests
      ansible.builtin.iptables:
        chain: INPUT
        protocol: icmp
        icmp_type: echo-request
        jump: ACCEPT
        state: present

    - name: Allow TCP 
      ansible.builtin.iptables:
        chain: "{{ item.chain }}"
        in_interface: "{{ item.interface }}"
        protocol: tcp
        destination_port: "{{ item.dstport }}"
        ctstate: NEW
        jump: ACCEPT
        state: present
      loop:
        - { chain: INPUT, interface: "{{ lan_interface }}", dstport: "{{ ssh_port }}" }
        - { chain: INPUT, interface: "{{ wan_interface }}", dstport: "{{ ssh_port }}" }
        - { chain: INPUT, interface: "{{ wan_interface }}", dstport: "{{ n2os_http_port }}" }
        - { chain: INPUT, interface: "{{ wan_interface }}", dstport: "{{ n2os_https_port }}" }

    - name: Docker host network allow firewall
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: docker0
        jump: ACCEPT
        state: present

    - name: Allow established and related connections
      ansible.builtin.iptables:
        chain: INPUT
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
        state: present

    - name: Allow established and related connections
      ansible.builtin.iptables:
        chain: OUTPUT
        ctstate: ESTABLISHED
        jump: ACCEPT
        state: present

    - name: Allow loopback interface traffic
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
        state: present

    - name: Allow loopback interface traffic
      ansible.builtin.iptables:
        chain: OUTPUT
        out_interface: lo
        jump: ACCEPT
        state: present

    - name: Enable IPv4 forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Allow LAN to WAN forwarding
      ansible.builtin.iptables:
        chain: FORWARD
        in_interface: "{{ lan_interface }}"
        out_interface: "{{ wan_interface }}"
        jump: ACCEPT
        state: present

    - name: Enable SNAT (Masquerade) for WAN traffic
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ wan_interface }}"
        jump: MASQUERADE
        state: present

    - name: Set default iptables policies
      ansible.builtin.iptables:
        chain: "{{ item.chain }}"
        policy: "{{ item.policy }}"
        state: present
      loop:
        - { chain: INPUT, policy: DROP }
        - { chain: FORWARD, policy: DROP }
        - { chain: OUTPUT, policy: ACCEPT }
        
    # - name: Log and Drop INPUT (uncomment to enable)
    #   ansible.builtin.iptables:
    #     chain: INPUT
    #     log_prefix: "IPTABLES_DROP_INPUT: "
    #     jump: LOG
    #     state: present
    # - name: Drop remaining INPUT traffic (uncomment to enable)
    #   ansible.builtin.iptables:
    #     chain: INPUT
    #     jump: DROP
    #     state: present

    # - name: Log and Drop FORWARD (uncomment to enable)
    #   ansible.builtin.iptables:
    #     chain: FORWARD
    #     log_prefix: "IPTABLES_DROP_FORWARD: "
    #     jump: LOG
    #     state: present
    # - name: Drop remaining FORWARD traffic (uncomment to enable)
    #   ansible.builtin.iptables:
    #     chain: FORWARD
    #     jump: DROP
    #     state: present

    - name: Install iptables-persistent
      ansible.builtin.apt:
        name: iptables-persistent
        state: present
      when: ansible_os_family == "Debian"

    - name: Save iptables rules
      community.general.iptables_state:
        path: /etc/iptables/rules.v4
        state: saved
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"




    